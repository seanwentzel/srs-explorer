{"mappings":"ACAA,MAAM,EAAiB,IAAI,IAAI,CAAC,QAAS,mBAAmB,EACtD,EAAS,CAAC,eAAgB,YAAa,aAAa,CAC1D,IAAI,EAAQ,GACR,EAAY,GACZ,EAAa,GAcjB,SAAS,EAAK,CAAU,EACpB,OAAQ,SAAS,cAAc,CAAC,GAAyB,KAAK,AAClE,CAGA,SAAS,IACL,IAAM,EAAY,EAAK,gBACjB,EAAgB,EAAK,aACrB,EAAiB,EAAK,cAC5B,GAAG,AAAkB,KAAlB,GAAyB,CAAA,IAAc,GAAS,IAAkB,GAAa,IAAmB,CAAA,EAAa,CAC9G,EAAQ,EACR,EAAY,EACZ,EAAa,EACb,IAAM,EAAU,AA6BxB,SAAyB,CAAa,CAAE,CAAiB,CAAE,CAAkB,EAMzE,IAAI,EAAU,CALc,CACxB,EAAG,EACH,OAAQ,KACR,MAAO,CACX,EAC2B,CACvB,EAAK,EACT,KAAM,EAAK,EAAQ,MAAM,EAAI,EAAK,KAAK,CACnC,IAAI,IAAI,KAAO,AAxBvB,UAAmB,CAAc,CAAE,CAAiB,CAAE,CAAkB,EACpE,QAAQ,GAAG,CAAC,kBACZ,IAAI,EAAK,EAAO,CAAC,CAAC,OAAO,CAAC,GAC1B,KAAO,AAAO,KAAP,GAAW,CACd,IAAM,EAAW,EAAO,CAAC,CAAC,SAAS,CAAC,EAAG,GAAM,EAAa,EAAO,CAAC,CAAC,SAAS,CAAC,EAAG,EAAU,MAAM,CAChG,MAAM,CACF,EAAG,EACH,OAAQ,EACR,MAAO,EAAO,KAAK,CAAG,CAC1B,EACA,QAAQ,GAAG,CAAC,GACZ,EAAK,EAAO,CAAC,CAAC,OAAO,CAAC,EAAW,EAAK,EACxC,CACN,EAWgC,CAAO,CAAC,EAAG,CAAE,EAAW,GAC5C,QAAQ,GAAG,CAAC,GACZ,EAAQ,IAAI,CAAC,GAEjB,GAAM,CACV,CACA,OAAO,CACX,C,2D;CA7CwC,EAAO,EAAW,GAC5C,EAAM,EAAQ,GAAG,CAAC,AAAC,GAAmB,CAAC,IAAI,EAAE,EAAO,KAAK,CAAC,EAAE,EAAE,EAAO,CAAC,CAAC,MAAM,CAAC,EAC9E,EAAK,CAAC,IAAI,EAAE,EAAI,IAAI,CAAC,IAAI,KAAK,CAAC,CAC/B,EAAS,SAAS,cAAc,CAAC,SACvC,CAAA,EAAO,SAAS,CAAG,CACvB,CACJ,CA/BA,OAAO,MAAM,CAAG,KACZ,EAAO,OAAO,CAAC,AAAC,IACZ,EAAe,OAAO,CAAC,AAAC,IACpB,IAAM,EAAe,SAAS,cAAc,CAAC,GAC7C,EAAa,gBAAgB,CAAC,EAAW,AAAC,IACtC,GACJ,EACJ,GACA,GACJ,EACJ","sources":["<anon>","src/index.ts"],"sourcesContent":["const possibleEvents = new Set([\n    \"input\",\n    \"onpropertychange\"\n]);\nconst inputs = [\n    \"start_string\",\n    \"in_string\",\n    \"out_string\"\n];\nlet start = \"\";\nlet in_string = \"\";\nlet out_string = \"\";\nwindow.onload = ()=>{\n    inputs.forEach((input)=>{\n        possibleEvents.forEach((eventName)=>{\n            const inputElement = document.getElementById(input);\n            inputElement.addEventListener(eventName, (ev)=>{\n                handleInput();\n            });\n        });\n        handleInput();\n    });\n};\nfunction read(id) {\n    return document.getElementById(id).value;\n}\nfunction handleInput() {\n    const new_start = read(\"start_string\");\n    const new_in_string = read(\"in_string\");\n    const new_out_string = read(\"out_string\");\n    if (new_in_string !== \"\" && (new_start !== start || new_in_string !== in_string || new_out_string !== out_string)) {\n        start = new_start;\n        in_string = new_in_string;\n        out_string = new_out_string;\n        const results = generateResults(start, in_string, out_string);\n        const lis = results.map((result)=>`<li>${result.depth}: ${result.s} </li>`);\n        const ul = `<ul>${lis.join(\"\")}</ul>`;\n        const output = document.getElementById(\"output\");\n        output.innerHTML = ul;\n    }\n}\nfunction* children(result, in_string, out_string) {\n    console.log(\"start children\");\n    let at = result.s.indexOf(in_string);\n    while(at !== -1){\n        const replaced = result.s.substring(0, at) + out_string + result.s.substring(at + in_string.length);\n        yield {\n            s: replaced,\n            parent: result,\n            depth: result.depth + 1\n        };\n        console.log(at);\n        at = result.s.indexOf(in_string, at + 1);\n    }\n}\nfunction generateResults(start, in_string, out_string) {\n    const firstResult = {\n        s: start,\n        parent: null,\n        depth: 0\n    };\n    let results = [\n        firstResult\n    ];\n    let at = 0;\n    while(at < results.length && at < 100){\n        for (let res of children(results[at], in_string, out_string)){\n            console.log(res);\n            results.push(res);\n        }\n        at += 1;\n    }\n    return results;\n}\n\n//# sourceMappingURL=index.a28ce44b.js.map\n","const possibleEvents = new Set([\"input\", \"onpropertychange\"]);\nconst inputs = [\"start_string\", \"in_string\", \"out_string\"];\nlet start = \"\";\nlet in_string = \"\";\nlet out_string = \"\";\n\nwindow.onload = () => {\n    inputs.forEach((input: string) => {\n        possibleEvents.forEach((eventName: string) => {\n            const inputElement = document.getElementById(input) as HTMLInputElement;\n            inputElement.addEventListener(eventName, (ev: Event) => {\n                handleInput();\n            })\n        });\n        handleInput();\n    });\n};\n\nfunction read(id: string): string {\n    return (document.getElementById(id) as HTMLInputElement).value;\n}\n\n\nfunction handleInput() {\n    const new_start = read(\"start_string\");\n    const new_in_string = read(\"in_string\");\n    const new_out_string = read(\"out_string\");\n    if(new_in_string !== \"\" && (new_start !== start || new_in_string !== in_string || new_out_string !== out_string)) {\n        start = new_start;\n        in_string = new_in_string;\n        out_string = new_out_string;\n        const results = generateResults(start, in_string, out_string);\n        const lis = results.map((result: Result) => `<li>${result.depth}: ${result.s} </li>`);\n        const ul = `<ul>${lis.join(\"\")}</ul>`\n        const output = document.getElementById(\"output\") as HTMLElement;\n        output.innerHTML = ul;\n    }\n}\n\ntype Result = {\n    s: string;\n    parent: Result | null;\n    depth: number;\n}\n\nfunction* children(result: Result, in_string: string, out_string: string) {\n    console.log(\"start children\");\n    let at = result.s.indexOf(in_string);\n    while (at !== -1) {\n        const replaced = result.s.substring(0, at) + out_string + result.s.substring(at+in_string.length);\n        yield {\n            s: replaced,\n            parent: result,\n            depth: result.depth + 1\n        };\n        console.log(at);\n        at = result.s.indexOf(in_string, at + 1);\n      }\n}\n\nfunction generateResults(start: string, in_string: string, out_string: string): Result[] {\n    const firstResult: Result = {\n        s: start,\n        parent: null,\n        depth: 0\n    }\n    let results = [firstResult];\n    let at = 0;\n    while(at < results.length && at < 100) {\n        for(let res of children(results[at], in_string, out_string)) {\n            console.log(res);\n            results.push(res);\n        }\n        at += 1;\n    }\n    return results;\n}"],"names":["possibleEvents","Set","inputs","start","in_string","out_string","read","id","document","getElementById","value","handleInput","new_start","new_in_string","new_out_string","results","generateResults","s","parent","depth","at","length","res","children","result","console","log","indexOf","replaced","substring","push","lis","map","ul","join","output","innerHTML","window","onload","forEach","input","eventName","inputElement","addEventListener","ev"],"version":3,"file":"index.a28ce44b.js.map"}